// ==UserScript==
// @name         The West Chat Bot
// @version      0.05
// @description  Description goes here
// @author       Allen "xShteff" McPotter
// @website      http://beta.the-west.net
// @include      *.the-west.*/game.php*
// @downloadURL  http://allenmcpotter.me/userscript/user.js
// @updateURL    http://allenmcpotter.me/userscript/user.js
// ==/UserScript==
/*
    COPYRIGHT
    End users are licensed the right to download the code into their web browser(s) for standard and reasonable usage only.
    If you want the script translated, you shall contact the script owner for this.
*/
function runScript(source) {
    if ('function' == typeof source) {
        source = '(' + source + ')();';
    }
    var script = document.createElement('script');
    script.setAttribute("type", "application/javascript");
    script.textContent = source;
    document.body.appendChild(script);
    document.body.removeChild(script);
}


runScript(function() {
    //	♥ ♦ ♣ ♠
    var Card = function(value, suiteID) {
        this.value = value;
        this.suiteID = suiteID;
    }

    Card.prototype.getValue = function() {
        return this.value;
    }

    Card.prototype.getSuiteID = function() {
        return this.suiteID;
    }

    Card.prototype.valueToSingleLetter = function() {
        var result;
        switch (this.value) {
            case 11:
                result = "J";
                break;
            case 12:
                result = "Q";
                break;
            case 13:
                result = "K";
                break;
            case 1:
                result = "A";
                break;
            default:
                result = this.value;
        }
        return result;
    }

    Card.prototype.suiteIDToASCII = function() {
        var result;
        switch (this.suiteID) {
            case 0:
                result = "♥";
                break;
            case 1:
                result = "♦";
                break;
            case 2:
                result = "♣";
                break;
            case 3:
                result = "♠";
                break;
            default:
                result = "suite error";
        }

        return result;
    }

    Card.prototype.toString = function() {
        if (this.suiteID == 0 || this.suiteID == 1)
            return "/900" + this.valueToSingleLetter() + this.suiteIDToASCII();
        else if (this.suiteID == 2 || this.suiteID == 3)
            return "/900" + this.valueToSingleLetter() + this.suiteIDToASCII();
        else
            return "wat";
    }

    var Pack = function() {
        this.cardsLeft = 52;
        this.cards = [];
        this.buildPack();
        this.shuffle();
    }

    Pack.prototype.buildPack = function() {
        for (var y = 0; y < 4; y++) {
            for (var i = 1; i < 14; i++) {
                this.cards.push(new Card(i, y));
            }
        }
    }

    Pack.prototype.shuffle = function() {
        for (var i = this.cards.length - 1; i > 0; i--) {
            var j = Math.floor(Math.random() * (i + 1));
            var temp = this.cards[i];
            this.cards[i] = this.cards[j];
            this.cards[j] = temp;
        }
    }

    Pack.prototype.getCard = function() {
    	if(this.cardsLeft != 0) {
    		var temp = this.cardsLeft;
	        this.cardsLeft--;
	        return this.cards[temp - 1];
    	} else {
    		return 0;
    	}
    }

    Pack.prototype.toString = function() {
    	var result;
    	for(var i = 0; i < this.cardsLeft.length; i++)
    		result += this.cardsLeft[i].toString() + "\n";
    	return result;
    }

    /* NEW GUI*/
    var latestMessage = $('<span></span>').attr('id', 'xsht-latest-message').css({
        'overflow-x': 'hidden',
        'height': '380px',
        'width': '290px',
        'float': 'left'
    });

    var l = $('<marquee></marquee>').attr('id', 'xsht-latest-message').css('color', 'white').text("No messages yet.");
    $("#user-interface").prepend($("<div id='ui_email_validation'>").append(l));

    var changeDisplayColor = function(color) {
        $('#xsht-latest-message').css('color', color);
    }

    /* GET AND SEND INFORMATION */
    var getPName = function() {
        var wholeMessage = $('#xsht-latest-message').text();
        var regex = /^\s*\[\d\d?:\d\d\]\s*(\[GM\])?\s*([^:]+?)\s*:\s*(.*?)\s*$/;
        var message = wholeMessage.match(regex);
        if (message != null)
            return message[2];
        else
            return "Nothing here";
    }

    var getMessage = function() {
        var wholeMessage = $('#xsht-latest-message').text();
        var regex = /^\s*\[\d\d?:\d\d\]\s*(\[GM\])?\s*([^:]+?)\s*:\s*(.*?)\s*$/;
        var message = wholeMessage.match(regex);
        if (message != null)
            return message[3];
        else
            return "Nothing here";
    }

    var isGM = function() {
        var wholeMessage = $('#xsht-latest-message').text();
        var regex = /^\s*\[\d\d?:\d\d\]\s*(\[GM\])?\s*([^:]+?)\s*:\s*(.*?)\s*$/;
        var message = wholeMessage.match(regex);
        return message[1] == "[GM]";
    }
    var nobleItems = [0, 1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000, 11000, 12000, 13000, 14000, 15000, 16000, 17000, 18000, 19000, 20000, 21000, 22000, 23000, 24000, 25000, 26000, 27000, 28000, 29000, 30000, 31000, 32000, 33000, 34000, 35000, 36000, 37000, 38000, 39000, 40000, 41000, 42000, 43000, 44000, 45000, 46000, 47000, 48000, 49000, 50000, 51000, 52000, 53000, 54000, 55000, 56000, 57000, 58000, 59000, 60000, 61000, 62000, 63000, 64000, 65000, 66000, 67000, 68000, 69000, 70000, 71000, 72000, 73000, 74000, 75000, 76000, 77000, 78000, 79000, 80000, 81000, 82000, 83000, 84000, 85000, 86000, 87000, 88000, 89000, 90000, 91000, 92000, 93000, 94000, 95000, 96000, 97000, 98000, 99000, 100000, 101000, 102000, 103000, 104000, 105000, 106000, 107000, 108000, 109000, 110000, 111000, 112000, 113000, 114000, 115000, 116000, 117000, 118000, 119000, 120000, 121000, 122000, 123000, 124000, 125000, 126000, 127000, 128000, 129000, 130000, 131000, 132000, 133000, 134000, 135000, 136000, 137000, 138000, 139000, 140000, 141000, 142000, 143000, 144000, 145000, 146000, 147000, 148000, 149000, 150000, 151000, 152000, 153000, 154000, 155000, 156000, 157000, 158000, 159000, 160000, 161000, 162000, 163000, 164000, 165000, 166000, 167000, 168000, 169000, 170000, 171000, 172000, 173000, 174000, 175000, 176000, 177000, 178000, 179000, 180000, 181000, 182000, 183000, 184000, 185000, 186000, 187000, 188000, 189000, 190000, 191000, 192000, 193000, 194000, 195000, 196000, 197000, 198000, 199000, 200000, 201000, 202000, 203000, 204000, 205000, 206000, 207000, 208000, 209000, 210000, 211000, 212000, 213000, 214000, 215000, 216000, 217000, 218000, 219000, 220000, 221000, 222000, 223000, 224000, 225000, 226000, 227000, 228000, 229000, 230000, 231000, 232000, 233000, 234000, 235000, 236000, 237000, 238000, 239000, 240000, 241000, 242000, 243000, 244000, 245000, 246000, 247000, 248000, 249000, 250000, 251000, 252000, 253000, 254000, 255000, 256000, 257000, 258000, 259000, 260000, 261000, 262000, 263000, 264000, 265000, 266000, 267000, 268000, 269000, 270000, 271000, 272000, 273000, 274000, 275000, 276000, 277000, 278000, 279000, 280000, 281000, 282000, 283000, 284000, 285000, 286000, 287000, 288000, 289000, 290000, 291000, 292000, 293000, 294000, 295000, 296000, 297000, 298000, 299000, 300000, 301000, 302000, 303000, 304000, 305000, 306000, 307000, 308000, 309000, 310000, 311000, 312000, 313000, 314000, 315000, 316000, 317000, 318000, 319000, 320000, 321000, 322000, 323000, 324000, 325000, 326000, 327000, 328000, 329000, 330000, 331000, 332000, 333000, 334000, 335000, 336000, 337000, 338000, 339000, 340000, 341000, 342000, 343000, 344000, 345000, 346000, 347000, 348000, 349000, 350000, 351000, 352000, 353000, 354000, 355000, 356000, 357000, 358000, 359000, 360000, 361000, 362000, 363000, 364000, 365000, 366000, 367000, 368000, 369000, 370000, 371000, 372000, 373000, 374000, 375000, 376000, 377000, 378000, 379000, 380000, 381000, 382000, 383000, 384000, 385000, 386000, 387000, 388000, 389000, 390000, 391000, 392000, 393000, 394000, 395000, 396000, 397000, 398000, 399000, 400000, 401000, 402000, 403000, 404000, 405000, 406000, 407000, 408000, 409000, 410000, 411000, 412000, 413000, 414000, 415000, 416000, 417000, 418000, 419000, 420000, 421000, 422000, 423000, 424000, 425000, 426000, 427000, 428000, 429000, 430000, 431000, 432000, 433000, 434000, 435000, 436000, 437000, 438000, 439000, 440000, 441000, 442000, 443000, 444000, 445000, 446000, 447000, 448000, 449000, 450000, 451000, 452000, 453000, 454000, 455000, 456000, 457000, 458000, 459000, 460000, 461000, 462000, 463000, 464000, 465000, 466000, 467000, 468000, 469000, 470000, 471000, 472000, 473000, 474000, 475000, 476000, 477000, 478000, 479000, 480000, 481000, 482000, 483000, 484000, 485000, 486000, 487000, 488000, 489000, 490000, 491000, 492000, 493000, 494000, 495000, 496000, 497000, 498000, 499000, 500000, 501000, 502000, 503000, 504000, 505000, 506000, 507000, 508000, 509000, 510000, 511000, 512000, 513000, 514000, 515000, 516000, 517000, 518000, 519000, 520000, 521000, 522000, 523000, 524000, 525000, 526000, 527000, 528000, 529000, 530000, 531000, 532000, 533000, 534000, 535000, 536000, 537000, 538000, 539000, 540000, 541000, 542000, 543000, 544000, 545000, 546000, 547000, 548000, 549000, 550000, 551000, 552000, 553000, 554000, 555000, 556000, 557000, 558000, 559000, 560000, 561000, 562000, 563000, 564000, 565000, 566000, 567000, 568000, 569000, 570000, 571000, 572000, 573000, 574000, 575000, 576000, 577000, 578000, 579000, 580000, 581000, 582000, 583000, 584000, 585000, 586000, 587000, 588000, 589000, 590000, 591000, 592000, 593000, 594000, 595000, 596000, 597000, 598000, 599000, 600000, 601000, 602000, 603000, 604000, 605000, 606000, 607000, 608000, 609000, 610000, 611000, 612000, 613000, 614000, 615000, 616000, 617000, 618000, 619000, 620000, 621000, 622000, 623000, 624000, 625000, 626000, 627000, 628000, 629000, 630000, 631000, 632000, 633000, 634000, 635000, 636000, 637000, 638000, 639000, 640000, 641000, 642000, 643000, 644000, 645000, 646000, 647000, 648000, 649000, 650000, 651000, 652000, 653000, 654000, 655000, 656000, 657000, 658000, 659000, 660000, 661000, 662000, 663000, 664000, 665000, 666000, 667000, 668000, 669000, 670000, 671000, 672000, 673000, 674000, 675000, 676000, 677000, 678000, 679000, 680000, 681000, 682000, 683000, 684000, 685000, 686000, 687000, 688000, 689000, 690000, 691000, 692000, 693000, 694000, 695000, 696000, 697000, 698000, 699000, 700000, 701000, 702000, 703000, 704000, 705000, 706000, 707000, 708000, 709000, 710000, 711000, 712000, 713000, 714000, 715000, 716000, 717000, 718000, 719000, 720000, 721000, 722000, 723000, 724000, 725000, 726000, 727000, 728000, 729000, 730000, 731000, 732000, 733000, 734000, 735000, 736000, 737000, 738000, 739000, 740000, 741000, 742000, 743000, 744000, 745000, 746000, 747000, 748000, 749000, 750000, 751000, 752000, 753000, 754000, 755000, 756000, 757000, 758000, 759000, 760000, 761000, 762000, 763000, 764000, 765000, 766000, 767000, 768000, 769000, 770000, 771000, 772000, 773000, 774000, 775000, 776000, 777000, 778000, 779000, 780000, 781000, 782000, 783000, 784000, 785000, 786000, 787000, 788000, 789000, 790000, 791000, 792000, 793000, 794000, 795000, 796000, 797000, 798000, 799000, 800000, 801000, 802000, 803000, 804000, 805000, 806000, 807000, 808000, 809000, 810000, 811000, 812000, 813000, 814000, 815000, 816000, 817000, 818000, 819000, 820000, 821000, 822000, 823000, 824000, 825000, 826000, 827000, 828000, 829000, 830000, 831000, 832000, 833000, 834000, 835000, 836000, 837000, 838000, 839000, 840000, 841000, 842000, 843000, 844000, 845000, 846000, 847000, 848000, 849000, 850000, 851000, 852000, 853000, 854000, 855000, 856000, 857000, 858000, 859000, 860000, 861000, 862000, 863000, 864000, 865000, 866000, 867000, 868000, 869000, 870000, 871000, 872000, 873000, 874000, 875000, 876000, 877000, 878000, 879000, 880000, 881000, 882000, 883000, 884000, 885000, 886000, 887000, 888000, 889000, 890000, 891000, 892000, 893000, 894000, 895000, 896000, 897000, 898000, 899000, 900000, 901000, 902000, 903000, 904000, 905000, 906000, 907000, 908000, 909000, 910000, 911000, 912000, 913000, 914000, 915000, 916000, 917000, 918000, 919000, 920000, 921000, 922000, 923000, 924000, 925000, 926000, 927000, 928000, 929000, 930000, 931000, 932000, 933000, 934000, 935000, 936000, 937000, 938000, 939000, 940000, 941000, 942000, 943000, 944000, 945000, 946000, 947000, 948000, 949000, 950000, 951000, 952000, 953000, 954000, 955000, 956000, 957000, 958000, 959000, 960000, 961000, 962000, 963000, 964000, 965000, 966000, 967000, 968000, 969000, 970000, 971000, 973000, 974000, 975000, 976000, 977000, 978000, 979000, 980000, 981000, 982000, 983000, 984000, 985000, 986000, 987000, 988000, 989000, 990000, 991000, 992000, 993000, 994000, 995000, 996000, 997000, 998000, 999000, 1000000, 1001000, 1002000, 1003000, 1004000, 1005000, 1006000, 1007000, 1008000, 1009000, 1010000, 1011000, 1012000, 1013000, 1014000, 1015000, 1016000, 1017000, 1018000, 1019000, 1337000, 1364000, 1700000, 1701000, 1702000, 1703000, 1704000, 1705000, 1706000, 1707000, 1708000, 1709000, 1710000, 1711000, 1712000, 1713000, 1715000, 1716000, 1717000, 1733000, 1740000, 1750000, 1751000, 1752000, 1753000, 1754000, 1755000, 1756000, 1757000, 1758000, 1759000, 1760000, 1761000, 1762000, 1763000, 1764000, 1765000, 1766000, 1767000, 1768000, 1769000, 1770000, 1771000, 1772000, 1773000, 1774000, 1775000, 1776000, 1777000, 1778000, 1779000, 1780000, 1781000, 1782000, 1783000, 1784000, 1785000, 1786000, 1787000, 1788000, 1789000, 1790000, 1791000, 1792000, 1793000, 1794000, 1795000, 1796000, 1797000, 1798000, 1799000, 1800000, 1801000, 1802000, 1803000, 1804000, 1805000, 1806000, 1807000, 1808000, 1809000, 1810000, 1811000, 1812000, 1813000, 1814000, 1815000, 1816000, 1817000, 1818000, 1819000, 1820000, 1821000, 1822000, 1823000, 1824000, 1825000, 1826000, 1827000, 1828000, 1829000, 1830000, 1831000, 1832000, 1833000, 1834000, 1835000, 1836000, 1837000, 1838000, 1839000, 1840000, 1841000, 1842000, 1843000, 1844000, 1845000, 1846000, 1847000, 1848000, 1849000, 1850000, 1851000, 1852000, 1853000, 1854000, 1855000, 1856000, 1857000, 1858000, 1859000, 1860000, 1861000, 1862000, 1863000, 1864000, 1865000, 1866000, 1867000, 1868000, 1869000, 1870000, 1871000, 1872000, 1873000, 1874000, 1875000, 1876000, 1877000, 1878000, 1879000, 1880000, 1881000, 1882000, 1883000, 1884000, 1885000, 1886000, 1887000, 1888000, 1889000, 1890000, 1891000, 1892000, 1893000, 1894000, 1895000, 1896000, 1897000, 1898000, 1899000, 1900000, 1901000, 1902000, 1903000, 1904000, 1905000, 1906000, 1907000, 1908000, 1909000, 1910000, 1911000, 1912000, 1913000, 1914000, 1915000, 1916000, 1917000, 1918000, 1919000, 1920000, 1921000, 1922000, 1923000, 1924000, 1925000, 1926000, 1927000, 1928000, 1929000, 1930000, 1931000, 1932000, 1933000, 1934000, 1935000, 1936000, 1937000, 1938000, 1939000, 1940000, 1941000, 1942000, 1943000, 1944000, 1945000, 1946000, 1947000, 1948000, 1949000, 1950000, 1951000, 1952000, 1953000, 1954000, 1955000, 1956000, 1957000, 1958000, 1959000, 1960000, 1961000, 1962000, 1963000, 1964000, 1965000, 1966000, 1967000, 1968000, 1969000, 1970000, 1971000, 1972000, 1973000, 1974000, 1975000, 1976000, 1977000, 1978000, 1979000, 1980000, 1981000, 1982000, 1983000, 1984000, 1985000, 1986000, 1987000, 1988000, 1989000, 1990000, 1991000, 1992000, 1993000, 1994000, 1995000, 1996000, 1997000, 1998000, 1999000, 2000000, 2001000, 2002000, 2003000, 2004000, 2005000, 2006000, 2007000, 2008000, 2009000, 2010000, 2100000, 2101000, 2102000, 2103000, 2104000, 2105000, 2106000, 2107000, 2108000, 2109000, 2110000, 2111000, 2112000, 2113000, 2114000, 2115000, 2116000, 2117000, 2118000, 2119000, 2120000, 2121000, 2122000, 2123000, 2124000, 2125000, 2126000, 2127000, 2128000, 2129000, 2130000, 2131000, 2132000, 2133000, 2134000, 2135000, 2136000, 2137000, 2138000, 2139000, 2144000, 2145000, 2146000, 2147000, 2148000, 2149000, 2150000, 2151000, 2152000, 2153000, 2154000, 2160000, 2161000, 2162000, 2163000, 2164000, 2165000, 2166000, 2167000, 2168000, 2169000, 2170000, 2171000, 2172000, 2173000, 2174000, 2175000, 2176000, 2177000, 2178000, 2179000, 2180000, 2181000, 2182000, 2183000, 2184000, 2185000, 2186000, 2187000, 2188000, 2189000, 2190000, 2191000, 2192000, 2193000, 2194000, 2195000, 2196000, 2197000, 2198000, 2199000, 2200000, 2201000, 2202000, 2203000, 2204000, 2205000, 2206000, 2207000, 2208000, 2209000, 2210000, 2211000, 2212000, 2213000, 2214000, 2215000, 2216000, 2217000, 2218000, 2219000, 2220000, 2221000, 2222000, 2223000, 2224000, 2225000, 2226000, 2227000, 2228000, 2229000, 2230000, 2231000, 2232000, 2233000, 2234000, 2235000, 2245000, 2247000, 2248000, 2249000, 2250000, 2251000, 2253000, 2254000, 2255000, 2256000, 2257000, 2258000, 2259000, 2260000, 2261000, 2262000, 2263000, 2264000, 2265000, 2266000, 2267000, 2268000, 2269000, 2270000, 2271000, 2272000, 2273000, 2274000, 2275000, 2276000, 2277000, 2279000, 2280000, 2281000, 2282000, 2283000, 2284000, 2285000, 2286000, 2287000, 2288000, 2289000, 2290000, 2291000, 2292000, 2293000, 2294000, 2295000, 2296000, 2297000, 2298000, 2299000, 2300000, 2301000, 2302000, 2305000, 2306000, 2307000, 2308000, 2309000, 2310000, 2311000, 2312000, 2313000, 2314000, 2315000, 2316000, 2317000, 2318000, 2319000, 2320000, 2321000, 2322000, 2323000, 2324000, 2325000, 2326000, 2328000, 2329000, 2330000, 2331000, 2332000, 2333000, 2334000, 2335000, 2336000, 2337000, 2338000, 2339000, 2340000, 2345000, 2346000, 2347000, 2348000, 2349000, 2350000, 2351000, 2352000, 2353000, 2354000, 2355000, 2356000, 2357000, 2358000, 2359000, 2360000, 2361000, 2362000, 2363000, 2364000, 2365000, 2366000, 2367000, 2368000, 2369000, 2370000, 2371000, 2372000, 2373000, 2374000, 2375000, 2376000, 2377000, 2378000, 2379000, 2380000, 2381000, 2382000, 2383000, 2384000, 2385000, 2386000, 2387000, 2388000, 2389000, 2390000, 2391000, 2392000, 2393000, 2394000, 2395000, 2396000, 2397000, 2398000, 2399000, 2400000, 2401000, 2402000, 2403000, 2404000, 2405000, 2406000, 2407000, 2408000, 2409000, 2410000, 2411000, 2412000, 2413000, 2414000, 2415000, 2416000, 2417000, 2418000, 2419000, 2420000, 2421000, 2422000, 2423000, 2424000, 2425000, 2426000, 2427000, 2428000, 2429000, 2430000, 2431000, 2432000, 2433000, 2434000, 2435000, 2436000, 2437000, 2438000, 2439000, 2440000, 2441000, 2442000, 2443000, 2444000, 2445000, 2446000, 2447000, 2448000, 2449000, 2450000, 2451000, 2452000, 2453000, 2454000, 2455000, 2456000, 2457000, 2458000, 2460000, 2461000, 2462000, 2465000, 2466000, 2467000, 2468000, 2470000, 2472000, 2473000, 2475000, 2476000, 2478000, 2479000, 2481000, 2482000, 2483000, 2484000, 2485000, 2486000, 2487000, 2488000, 2489000, 2490000, 2491000, 2493000, 2495000, 2497000, 2499000, 2500000, 2501000, 2502000, 2503000, 2504000, 2505000, 2506000, 2507000, 2508000, 2509000, 2510000, 2511000, 2512000, 2513000, 2514000, 2515000, 2516000, 2517000, 2518000, 2519000, 2520000, 2521000, 2522000, 2523000, 2524000, 2525000, 2526000, 2527000, 2528000, 2529000, 2530000, 2531000, 2532000, 2533000, 2534000, 2535000, 2536000, 2537000, 2538000, 2539000, 2540000, 2541000, 2542000, 2550000, 2551000, 2552000, 2553000, 2554000, 2555000, 2556000, 2557000, 2558000, 2559000, 2560000, 2561000, 2562000, 2563000, 2564000, 2565000, 2566000, 2567000, 2568000, 2569000, 2570000, 2571000, 2572000, 2573000, 2574000, 2575000, 2576000, 2577000, 2578000, 2579000, 2580000, 2581000, 2582000, 2583000, 2585000, 2586000, 2587000, 2588000, 2589000, 2590000, 2591000, 2592000, 2593000, 2594000, 2600000, 2601000, 2602000, 2603000, 2604000, 2605000, 2606000, 2610000, 2611000, 2612000, 2613000, 2614000, 2615000, 2616000, 2617000, 2618000, 2619000, 2620000, 2621000, 2622000, 2623000, 2624000, 2625000, 2626000, 2627000, 2628000, 2629000, 2630000, 2640000, 2641000, 2642000, 2643000, 2644000, 2645000, 2646000, 2647000, 2648000, 2649000, 2650000, 2660000, 2661000, 2662000, 2663000, 2665000, 2666000, 2667000, 2668000, 2669000, 2670000, 2671000, 2672000, 2673000, 2674000, 2675000, 2676000, 2677000, 2678000, 2679000, 2680000, 2681000, 2682000, 2683000, 2684000, 2685000, 2687000, 2688000, 2689000, 2690000, 2691000, 2692000, 2693000, 2694000, 2695000, 2696000, 2697000, 2698000, 2699000, 2700000, 2701000, 2702000, 2703000, 2704000, 2705000, 2706000, 2707000, 2708000, 2709000, 2710000, 2711000, 2712000, 2713000, 2714000, 2715000, 2716000, 2717000, 2718000, 2719000, 2720000, 2721000, 2722000, 2723000, 2724000, 2725000, 2726000, 2727000, 2728000, 2729000, 2730000, 2731000, 2732000, 2733000, 2734000, 2735000, 2736000, 2737000, 2738000, 2739000, 2740000, 2741000, 2755000, 10000000, 10001000, 10002000, 10003000, 10004000, 10005000, 10006000, 10007000, 10010000, 10011000, 10012000, 10013000, 10014000, 10015000, 10016000, 10017000, 10020000, 10021000, 10022000, 10023000, 10024000, 10025000, 10026000, 10027000, 10030000, 10031000, 10032000, 10033000, 10034000, 10035000, 10036000, 10037000, 10040000, 10041000, 10042000, 10043000, 10044000, 10045000, 10046000, 10047000, 10050000, 10051000, 10052000, 10053000, 10054000, 10055000, 10056000, 10057000, 10060000, 10061000, 10062000, 10063000, 10064000, 10065000, 10066000, 10067000, 10070000, 10071000, 10072000, 10073000, 10074000, 10075000, 10076000, 10077000, 10080000, 10081000, 10082000, 10083000, 10084000, 10085000, 10086000, 10087000, 10090000, 10091000, 10092000, 10093000, 10094000, 10095000, 10096000, 10097000, 10100000, 10101000, 10102000, 10103000, 10104000, 10105000, 10106000, 10107000, 10110000, 10111000, 10112000, 10113000, 10114000, 10115000, 10116000, 10117000, 10120000, 10121000, 10122000, 10123000, 10124000, 10125000, 10126000, 10127000, 10130000, 10131000, 10132000, 10133000, 10134000, 10135000, 10136000, 10137000, 10140000, 10141000, 10142000, 10143000, 10144000, 10145000, 10146000, 10147000, 10148000, 10149000, 10150000, 10151000, 10152000, 10153000, 10154000, 10155000, 10156000, 10157000, 10158000, 10159000, 10160000, 10161000, 10162000, 10163000, 10164000, 10165000, 10166000, 10167000, 10168000, 10169000, 10170000, 10171000, 10172000, 10173000, 10174000, 10175000, 10176000, 10177000, 10178000, 10179000, 10180000, 10181000, 10182000, 10183000, 10184000, 10185000, 10186000, 10187000, 10188000, 10189000, 10190000, 10191000, 10192000, 10193000, 10194000, 10195000, 10196000, 10197000, 10198000, 10199000, 10200000, 10201000, 10202000, 10203000, 10204000, 10205000, 10206000, 10207000, 10208000, 10209000, 10210000, 10211000, 10212000, 10213000, 10214000, 10215000, 10216000, 10217000, 10218000, 10219000, 10220000, 10221000, 10222000, 10223000, 10224000, 10225000, 10226000, 10227000, 10228000, 10229000, 10230000, 10231000, 10232000, 10233000, 10234000, 10235000, 10236000, 10237000, 10238000, 10239000, 10240000, 10241000, 10242000, 10243000, 10244000, 10245000, 10246000, 10247000, 10248000, 10249000, 10250000, 10251000, 10252000, 10253000, 10254000, 10255000, 10256000, 10257000, 10258000, 10259000, 10260000, 10261000, 10300000, 10301000, 10302000, 10303000, 10304000, 10305000, 10306000, 10307000, 10308000, 10309000, 10320000, 10321000, 10325000, 10326000, 10327000, 10328000, 10329000, 10330000, 10340000, 10341000, 10342000, 10343000, 10344000, 10345000, 10346000, 10347000, 10348000, 10349000, 10350000, 10351000, 10352000, 10353000, 10354000, 10355000, 10356000, 10357000, 10358000, 10359000, 10360000, 11000000, 11001000, 11002000, 11003000, 11004000, 11005000, 11006000, 11007000, 11010000, 11011000, 11012000, 11013000, 11014000, 11015000, 11016000, 11017000, 11020000, 11021000, 11022000, 11023000, 11024000, 11025000, 11026000, 11027000, 11030000, 11031000, 11032000, 11033000, 11034000, 11035000, 11036000, 11037000, 11040000, 11041000, 11042000, 11043000, 11044000, 11045000, 11046000, 11047000, 11050000, 11051000, 11052000, 11053000, 11054000, 11055000, 11056000, 11057000, 11060000, 11061000, 11062000, 11063000, 11064000, 11065000, 11066000, 11067000, 11070000, 11071000, 11072000, 11073000, 11074000, 11075000, 11076000, 11077000, 11080000, 11081000, 11082000, 11083000, 11084000, 11085000, 11086000, 11087000, 11088000, 11089000, 11090000, 11091000, 11092000, 11093000, 11094000, 11095000, 11096000, 11097000, 11098000, 11099000, 11100000, 11101000, 11102000, 11103000, 11104000, 11105000, 11106000, 11107000, 11108000, 11109000, 11110000, 11111000, 11112000, 11113000, 11114000, 11115000, 11116000, 11117000, 11118000, 11119000, 11120000, 11121000, 11122000, 11123000, 11124000, 11125000, 11126000, 11127000, 11128000, 11129000, 11130000, 11131000, 11132000, 11133000, 11134000, 11135000, 11136000, 11137000, 11138000, 11139000, 11140000, 11141000, 11142000, 11143000, 11144000, 11145000, 11146000, 11147000, 11148000, 11149000, 11150000, 11151000, 11152000, 11153000, 11154000, 11155000, 11156000, 11157000, 11158000, 11159000, 11160000, 11161000, 11162000, 11163000, 11164000, 11165000, 11166000, 11167000, 11168000, 11169000, 11170000, 11171000, 11172000, 11173000, 11174000, 11175000, 11176000, 11177000, 11178000, 11179000, 11180000, 11181000, 11182000, 11183000, 11184000, 11185000, 11186000, 11187000, 11188000, 11189000, 11190000, 11191000, 11192000, 11193000, 11194000, 11195000, 11196000, 11197000, 11198000, 11199000, 11200000, 11201000, 11202000, 11203000, 11204000, 11205000, 11206000, 11207000, 11208000, 11209000, 11210000, 11211000, 11212000, 11213000, 11214000, 11215000, 11216000, 11217000, 11218000, 11219000, 11220000, 11221000, 11222000, 11223000, 11224000, 11225000, 11226000, 11227000, 11228000, 11229000, 11230000, 11231000, 11232000, 11233000, 11234000, 11235000, 11236000, 11237000, 11238000, 11239000, 11240000, 11241000, 11242000, 11243000, 11244000, 11245000, 11246000, 11247000, 11248000, 11249000, 11250000, 11251000, 11252000, 11253000, 11254000, 11255000, 11256000, 11257000, 11258000, 11259000, 11260000, 11261000, 11262000, 11263000, 11264000, 11265000, 11266000, 11267000, 11268000, 11269000, 11270000, 11271000, 11272000, 11273000, 11274000, 11275000, 11276000, 11277000, 11278000, 11279000, 11280000, 11281000, 11282000, 11283000, 11290000, 11300000, 11301000, 11302000, 11303000, 11304000, 11310000, 11311000, 11312000, 11313000, 11314000, 11315000, 11316000, 11317000, 11318000, 11319000, 11320000, 11321000, 11322000, 11323000, 11324000, 11325000, 11326000, 11327000, 11328000, 11329000, 11330000, 12700000, 12701000, 12702000, 12703000, 12704000, 12705000, 12706000, 12707000, 12708000, 12709000, 12710000, 12711000, 12712000, 12713000, 13701000, 13702000, 13703000, 13704000, 13705000, 13706000, 13711000, 16100000, 17000000, 17001000, 17002000, 17003000, 17004000, 17005000, 17006000, 17007000, 17008000, 17020000, 17021000, 17022000, 17023000, 17024000, 17025000, 17026000, 17027000, 17028000, 21340000, 21341000, 21342000, 21343000, 21345000, 40000000, 40001000, 40002000, 40003000, 40004000, 40005000, 40006000, 40007000, 40008000, 40009000, 40010000, 40011000, 40012000, 40013000, 40014000, 40015000, 40016000, 40017000, 40018000, 40019000, 40020000, 40021000, 40022000, 40023000, 40024000, 40025000, 40026000, 40027000, 40028000, 40029000, 40030000, 40031000, 40032000, 40033000, 40034000, 40035000, 40036000, 40037000, 40038000, 40039000, 40040000, 40041000, 40042000, 40043000, 40044000, 40045000, 40046000, 40047000, 40048000, 40049000, 40050000, 40051000, 40052000, 40053000, 40054000, 40055000, 40056000, 40057000, 40058000, 40059000, 40060000, 40061000, 40062000, 40063000, 40064000, 40065000, 40066000, 40067000, 40068000, 40069000, 40070000, 40071000, 40072000, 40073000, 40074000, 40075000, 40076000, 40077000, 40078000, 40079000, 40080000, 40081000, 40082000, 40089000, 40090000, 40091000, 40092000, 40093000, 40094000, 40095000, 40096000, 40097000, 40098000, 40099000, 40100000, 40101000, 40102000, 40103000, 40104000, 40105000, 40106000, 40107000, 40108000, 40109000, 40110000, 40111000, 40112000, 40113000, 40114000, 40115000, 40116000, 40117000, 40118000, 40119000, 40120000, 40121000, 40122000, 40123000, 40124000, 40125000, 40126000, 40127000, 40128000, 40129000, 40130000, 40131000, 40132000, 40133000, 40134000, 40135000, 40136000, 40137000, 40138000, 40139000, 40140000, 40141000, 40142000, 40143000, 40144000, 40145000, 40146000, 40147000, 40148000, 40149000, 40150000, 40151000, 40152000, 40153000, 40154000, 40155000, 40156000, 40157000, 40158000, 40159000, 40160000, 40161000, 40162000, 40163000, 40164000, 40165000, 40166000, 40167000, 40168000, 40169000, 40170000, 40171000, 40172000, 40173000, 40174000, 40175000, 40176000, 40177000, 40178000, 40179000, 40180000, 40181000, 40182000, 40183000, 40200000, 40201000, 40202000, 40203000, 40204000, 40205000, 40206000, 40207000, 40208000, 40209000, 40210000, 40211000, 40212000, 40220000, 40221000, 40230000, 40231000, 40232000, 40233000, 40234000, 40235000, 40240000, 40241000, 40242000, 40243000, 40244000, 40245000, 40246000, 40247000, 40248000, 40249000, 40250000, 40251000, 40252000, 40253000, 40254000, 40255000, 40256000, 40257000, 40258000, 40259000, 40260000, 41000000, 41001000, 41002000, 41003000, 41004000, 41005000, 41006000, 41007000, 41008000, 41009000, 41010000, 41011000, 41012000, 41013000, 41014000, 41015000, 41016000, 41017000, 41018000, 41019000, 41020000, 41021000, 41022000, 41023000, 41024000, 41025000, 41026000, 41027000, 41028000, 41029000, 41030000, 41031000, 41032000, 41033000, 41034000, 41035000, 41036000, 41037000, 41038000, 41039000, 41040000, 41041000, 41042000, 41043000, 41044000, 41045000, 41046000, 41047000, 41048000, 41049000, 41050000, 41051000, 41052000, 41053000, 41054000, 41055000, 41056000, 41057000, 41058000, 41059000, 41060000, 41061000, 41062000, 41063000, 41064000, 41065000, 41066000, 41067000, 41068000, 41069000, 41070000, 41071000, 41072000, 41073000, 41074000, 41075000, 41076000, 41077000, 41078000, 41079000, 41080000, 41081000, 41082000, 41083000, 41084000, 41085000, 41086000, 41087000, 41088000, 41089000, 41090000, 41091000, 41092000, 41093000, 41094000, 41095000, 41096000, 41097000, 41098000, 41099000, 41100000, 41101000, 41102000, 41103000, 41104000, 41105000, 41106000, 41107000, 41108000, 41109000, 41110000, 41111000, 41112000, 41113000, 41114000, 41115000, 41116000, 41117000, 41118000, 41119000, 41120000, 41121000, 41122000, 41123000, 41124000, 41125000, 41126000, 41127000, 41128000, 41129000, 41130000, 41131000, 41132000, 41133000, 41134000, 41135000, 41136000, 41137000, 41138000, 41139000, 41140000, 41141000, 41142000, 41143000, 41144000, 41145000, 41146000, 41147000, 41148000, 41149000, 41150000, 41151000, 41152000, 41153000, 41154000, 41155000, 41156000, 41157000, 41158000, 41159000, 41160000, 41161000, 41162000, 41163000, 41164000, 41165000, 41166000, 41167000, 41168000, 41169000, 41170000, 41171000, 41172000, 41173000, 41200000, 41201000, 41202000, 41203000, 41204000, 41205000, 41206000, 41207000, 41208000, 41209000, 41210000, 41211000, 41212000, 41220000, 41221000, 41225000, 41226000, 41227000, 41228000, 41229000, 41230000, 41240000, 41241000, 41242000, 41243000, 41244000, 41245000, 41246000, 41247000, 41248000, 41249000, 41250000, 41251000, 41252000, 41253000, 41254000, 41255000, 41256000, 41257000, 41258000, 41259000, 41260000, 41999000, 42000000, 42001000, 42002000, 42003000, 42004000, 42005000, 42006000, 42007000, 42008000, 42009000, 42010000, 42011000, 42012000, 42013000, 42014000, 42015000, 42016000, 42017000, 42018000, 42019000, 42020000, 42021000, 42022000, 42023000, 42024000, 42025000, 42026000, 42027000, 42028000, 42029000, 42030000, 42031000, 42032000, 42033000, 42034000, 42035000, 42036000, 42037000, 42038000, 42039000, 42040000, 42041000, 42042000, 42043000, 42044000, 42045000, 42046000, 42047000, 42048000, 42049000, 42050000, 42051000, 42052000, 42053000, 42054000, 42055000, 42056000, 42057000, 42058000, 42059000, 42060000, 42061000, 42062000, 42063000, 42064000, 42065000, 42066000, 42067000, 42068000, 42069000, 42070000, 42071000, 42072000, 42073000, 42074000, 42075000, 42076000, 42077000, 42078000, 42079000, 42080000, 42081000, 42082000, 42083000, 42084000, 42085000, 42086000, 42087000, 42088000, 42089000, 42090000, 42091000, 42092000, 42093000, 42094000, 42095000, 42096000, 42097000, 42098000, 42099000, 42100000, 42101000, 42102000, 42103000, 42104000, 42105000, 42106000, 42107000, 42108000, 42109000, 42110000, 42111000, 42112000, 42113000, 42114000, 42115000, 42116000, 42117000, 42118000, 42119000, 42120000, 42121000, 42122000, 42123000, 42124000, 42125000, 42126000, 42127000, 42128000, 42129000, 42130000, 42131000, 42132000, 42133000, 42134000, 42135000, 42136000, 42137000, 42138000, 42139000, 42140000, 42141000, 42142000, 42143000, 42144000, 42145000, 42146000, 42147000, 42148000, 42149000, 42200000, 42201000, 42202000, 42203000, 42204000, 42205000, 42206000, 42207000, 42208000, 42209000, 42210000, 42211000, 42220000, 42225000, 42226000, 42227000, 42228000, 42229000, 42230000, 42240000, 42241000, 42242000, 42243000, 42244000, 42245000, 42246000, 42247000, 42248000, 42249000, 42250000, 42251000, 42252000, 42253000, 42254000, 42255000, 42256000, 42257000, 42258000, 42259000, 42260000, 42261000, 43000000, 43001000, 43002000, 43003000, 43004000, 43005000, 43006000, 43007000, 43008000, 43009000, 43010000, 43011000, 43012000, 43013000, 43014000, 43015000, 43016000, 43017000, 43018000, 43019000, 43020000, 43021000, 43022000, 43023000, 43024000, 43025000, 43026000, 43027000, 43028000, 43029000, 43030000, 43031000, 43032000, 43033000, 43034000, 43035000, 43036000, 43037000, 43038000, 43039000, 43040000, 43041000, 43042000, 43043000, 43044000, 43045000, 43046000, 43047000, 43048000, 43049000, 43050000, 43051000, 43052000, 43053000, 43054000, 43055000, 43056000, 43057000, 43058000, 43059000, 43060000, 43061000, 43062000, 43063000, 43064000, 43065000, 43066000, 43067000, 43068000, 43069000, 43070000, 43071000, 43072000, 43073000, 43074000, 43075000, 43076000, 43077000, 43078000, 43079000, 43080000, 43081000, 43082000, 43083000, 43084000, 43085000, 43086000, 43087000, 43088000, 43089000, 43090000, 43091000, 43092000, 43093000, 43094000, 43095000, 43096000, 43097000, 43098000, 43099000, 43100000, 43101000, 43102000, 43103000, 43104000, 43105000, 43106000, 43107000, 43108000, 43109000, 43110000, 43111000, 43112000, 43113000, 43114000, 43115000, 43116000, 43117000, 43118000, 43119000, 43120000, 43121000, 43122000, 43123000, 43124000, 43125000, 43126000, 43127000, 43128000, 43129000, 43130000, 43131000, 43132000, 43133000, 43134000, 43135000, 43136000, 43137000, 43138000, 43139000, 43140000, 43141000, 43142000, 43143000, 43200000, 43201000, 43202000, 43203000, 43204000, 43205000, 43206000, 43207000, 43208000, 43209000, 43210000, 43220000, 43221000, 43225000, 43226000, 43227000, 43228000, 43229000, 43230000, 43240000, 43241000, 43242000, 43243000, 43244000, 43245000, 43246000, 43247000, 43248000, 43249000, 43250000, 43251000, 43252000, 43253000, 43254000, 43255000, 43256000, 43257000, 43258000, 43259000, 43260000, 44000000, 44001000, 44002000, 44003000, 44004000, 44005000, 44006000, 44007000, 44008000, 44009000, 44010000, 44011000, 44012000, 44013000, 44014000, 44015000, 44016000, 44017000, 44018000, 44019000, 44020000, 44030000, 44031000, 44032000, 44033000, 44034000, 44035000, 44036000, 44037000, 44038000, 44039000, 44040000, 44041000, 44042000, 44043000, 44044000, 44045000, 44046000, 44047000, 44050000, 44051000, 44052000, 44053000, 44054000, 44055000, 44056000, 44057000, 44060000, 44061000, 44062000, 44063000, 44065000, 44070000, 44071000, 44072000, 44073000, 44074000, 44075000, 44076000, 44077000, 44078000, 44079000, 44080000, 44081000, 44082000, 45000000, 45001000, 45002000, 45003000, 45004000, 45005000, 45006000, 45007000, 45008000, 45009000, 45010000, 45011000, 45012000, 45013000, 45014000, 45015000, 45016000, 45017000, 45018000, 45019000, 45020000, 45021000, 45022000, 45023000, 45024000, 45030000, 45031000, 45032000, 45040000, 45041000, 45042000, 45043000, 45044000, 45045000, 45046000, 45047000, 45048000, 45049000, 45050000, 45051000, 45052000, 45053000, 45054000, 45055000, 45056000, 45057000, 45058000, 45059000, 48000000, 48001000, 48002000, 48003000, 48004000, 48005000, 48006000, 48007000, 48008000, 48009000, 48010000, 48011000, 48012000, 48013000, 48014000, 48015000, 48016000, 48017000, 48018000, 48019000, 48999000, 185145000, 185146000, 185147000, 185148000, 185149000, 185150000, 185151000, 185152000, 185200000, 185201000, 185202000, 185203000, 185204000, 185205000, 253800000];
    var isCommand = function() {
        return getMessage().charAt(0) == "!";
    }

    var defaultRoom = Chat.Resource.Manager.getGeneralRoom();
    var textColor = "990";
    var sendMessage = function(message) {
        Chat.Request.Send("/" + textColor + message, Chat.Resource.Manager.getRoom(defaultRoom));
    }


    var chatBan = function(message) {
            new Chat.Request.BanPlayer(message);
        }
        /* IGNORE SYSTEM.
		It allows you to block users from using commands.
    */
    var ignoredList = ["xNjub"];
    var ignoredCount = 0;
    var ignorePlayer = function(name) {
        if (isIgnored(name)) {
            for (var i = 0; i < ignoredList.length; i++)
                if (ignoredList[i].toUpperCase() == name.toUpperCase())
                    ignoredList[i] = "NaN";
        } else {
            ignoredList[ignoredCount] = name;
            ignoredCount++;
        }
    }


    var isIgnored = function(name) {
        for (var i = 0; i < ignoredList.length; i++) {
            if (ignoredList[i].toUpperCase() == name.toUpperCase())
                return true;
        }
        return false;
    }

    /*RAFFLE SYSTEM
		Makes a list of users and picks a random winner
    */
    var raffleStatus = false;
    var rafflePrize;
    var westRaffleStatus = null;
    var westRaffle = ["xNjub"];
    var westRaffleSize = 0;

    var addRafflePlayer = function(name) {
        if (raffleIsRegistered(name)) {
            console.log(name + " already registered");
        } else {
            westRaffle[westRaffleSize] = name;
            westRaffleSize++;
            sendMessage(name + " was added to the raffle.", "saloon");
            console.log(westRaffle);
            console.log(westRaffleSize);
        }

    }

    var getRandomRafflePlayer = function() {
        return westRaffle[Math.floor(Math.random() * westRaffle.length)];
    }

    var raffleIsRegistered = function(name) {
        for (var i = 0; i < westRaffle.length; i++) {
            if (westRaffle[i] == name)
                return true;
        }
        return false;
    }

    var resetRaffle = function() {
        westRaffle = ["xNjub"];
        westRaffleSize = 0;
        console.log('Raffle reset');
    }

    var startRaffle = function(prize) {
        if (raffleStatus) {
            sendMessage("A raffle is already active! Write !raffle in chat to join.", "saloon");
        } else {
            if (prize == undefined) {
                sendMessage("A raffle has started! Write '!raffle' in chat to join! (No prize lol)", "saloon");
            } else {
                sendMessage("A raffle has started! Write '!raffle' in chat to join! (Winner gets " + prize + "!)", "saloon");
                rafflePrize = prize;
            }
            raffleStatus = true;
            console.log("raffle started");
        }


    }

    var stopRaffle = function() {
        if (raffleStatus) {
            raffleStatus = false;
            console.log("Raffle ended. Winner is:");
            sendMessage("The raffle has ended! The winner is: " + getRandomRafflePlayer() + "!", "saloon");
            rafflePrize = "Nothing.";
        } else {
            sendMessage("What raffle?", "saloon");
        }
    }

    var rerollRaffle = function() {
        raffleStatus = true;
        sendMessage("Re-rolling the raffle! The new winner is: " + getRandomRafflePlayer() + "!", "saloon");
        raffleStatus = false;
    }

    /*Voting system*/
    var votedList = ["xNjub"];
    var votedYes = 0;
    var votedCount = 0;
    var votedNo = 0;
    var voteTopic = "";
    var voteStatus = false;

    var startVote = function(topic) {
        votedList = ["xNjub"];
        votedYes = 0;
        votedNo = 0;
        voteTopic = topic;
        voteStatus = true;
        console.log(votedList);
        console.log(voteStatus);
        sendMessage("A new poll has started! Type '!vote yes' or '!vote no' in chat to vote! (The topic is: " + voteTopic + ")", "saloon");
    }

    var voteIsRegistered = function(name) {
        for (var i = 0; i < votedList.length; i++) {
            if (votedList[i] == name)
                return true;
        }
        return false;
    }

    var vote = function(what) {
        if (!(voteIsRegistered(getPName()))) {
            console.log("NOT REGISTERED, '" + what + "'");
            if (what.toLowerCase() == "yes ") {
                votedYes++;
                sendMessage(getPName() + "'s vote has been added.", "saloon");
                votedList[votedCount] = getPName();
                votedCount++;
            } else if (what.toLowerCase() == "no ") {
                votedNo++;
                sendMessage(getPName() + "'s vote has been added.", "saloon");
                votedList[votedCount] = getPName();
                votedCount++;
            }
        }
    }

    var stopVote = function() {
        voteStatus = false;
        var printStr = "Voting completed. Results: Yes - " + votedYes + " votes";
        printStr += ", No - " + votedNo + " votes.";
        sendMessage(printStr, "saloon");
    }



    /*Flood Protect thing*/
    var availableDate = Game.getServerTime();

    var timePassed = function() {
        return Game.getServerTime() > availableDate;
    }

    var pokerPack = new Pack();

    /*ADMIN COMMANDS*/
    var doAdminStuff = function() {
        var message = getMessage();
        /*Checking if the message is a combination between a command and attributes*/
        if (/\s/g.test(message)) {
            /*Splitting the string word by word*/
            var splitMessage = message.split(" ");
            var command = splitMessage[0]; /*The command is always going to be the first word*/
            var attributes = [""];
            /*Collecting ALL the attributes into one String*/
            for (var i = 1; i < splitMessage.length; i++) {
                attributes += splitMessage[i];
                if (i < splitMessage.length - 1)
                    attributes += " ";
            }
            /*Commands that work with attributes*/
            switch (command) {
                case "!setroom":
                    defaultRoom = attributes;
                    console.log('"' + defaultRoom + '"');
                    break;
                case "!anticlownfiesta":
                    Chat.Request.BanPlayer(attributes + ": pls no ( ͡° ͜◯ ͡°) ＣＬＯＷＮ ＦＩＥＳＴＡ ( ͡° ͜◯ ͡°) ");
                    sendMessage("( ͡° ͜◯ ͡°) ＣＬＯＷＮ ＦＩＥＳＴＡ ( ͡° ͜◯ ͡°) temporarily eliminated.", "saloon");
                    break;
                case "!startraffle":
                    startRaffle(attributes);
                    break;
                case "!setprize":
                    rafflePrize = attributes;
                    sendMessage("The prize was set to " + rafflePrize, "saloon");
                    break;
                case "!forbid":
                    if (getPName() == Character.name)
                        ignorePlayer(attributes);
                    console.log(ignoredList);
                    break;
                case "!setcolor":
                    textColor = attributes;
                    sendMessage("Color changed.", "saloon");
                    break;
                case "!startvote":
                    if (!voteStatus)
                        startVote(attributes);
                    break;
            }
        } else {
            /*Single word commands*/
            switch (message) {
            	case "!buildpack":
            		sendMessage("pack built");
            		pokerPack = new Pack();
            		break;
            	case "!getcard":
            		sendMessage("Card: " + pokerPack.getCard().toString());
            		break;
                case "!endvote":
                    if (voteStatus)
                        stopVote();
                    break;
                case "!startraffle":
                    resetRaffle();
                    startRaffle();
                    break;
                case "!endraffle":
                    stopRaffle();
                    break;
                case "!reroll":
                    rerollRaffle();
                    break;
                case "!test":
                    console.log("hello world");
                    break;
                case "!prize":
                    sendMessage("The winner gets " + rafflePrize, "saloon");
                    break;
                default:
                    console.log('wut?');
            }
        }

    }

    /* USER COMMANDS */
    var autoReply = function(room) {
        var message = getMessage().toLowerCase();
        /*Checking if the message is a combination between a command and attributes*/
        if (/\s/g.test(message)) {
            var splitMessage = message.split(" ");
            var command = splitMessage[0]; /*The command is always going to be the first word*/
            var attributes = [""];
            /*Collecting ALL the attributes into one String*/
            for (var i = 1; i < splitMessage.length; i++) {
                attributes += splitMessage[i];
                if (i < splitMessage.length)
                    attributes += " ";
            }
            switch (command) {
                case "!ban":
                    sendMessage(getPName() + " has been banned.", room);
                    break;
                case "!vote":
                    if (voteStatus)
                        vote(attributes);
                    break;
                    /*default:
                    sendMessage("Sorry " + getPName() + ", " + command + " is not a command I recognise.");*/
            }
        } else {
            /*Single-word commands*/
            switch (message) {
                case "!voteentries":
                    if (voteStatus)
                        sendMessage("I have registered " + votedCount + " votes.")
                    break;
                case "!votetopic":
                    if (voteStatus)
                        sendMessage("The topic is: " + voteTopic, room);
                    break;
                case "!about":
                    if (Character.name == "xShteff")
                        sendMessage(getPName() + " don't act like a njub please. You know who I am.", room);
                    else
                        sendMessage("I am " + Character.name + ". Artificial Intelligence programmed by xShteff.", room);
                    break;
                case "!rules":
                    sendMessage("The Public Beta server runs under special modified rules. http://bit.ly/BetaRules", room);
                    break;
                case "!shenanigans":
                    sendMessage("I call shenanigans!", room);
                    break;
                case "!help":
                    sendMessage("View my profile for a full list of commands.", room);
                    break;
                case "!flipacoin":
                    var coin = ["heads", "tails"];
                    sendMessage("*flips coin*... " + coin[Math.floor(Math.random() * 2)], room);
                    break;
                case "!rolladice":
                    var diceN = Math.floor(Math.random() * 6) + 1;
                    sendMessage("*rolls*... " + diceN + "!", room);
                    break;
                case "!wow":
                    sendMessage("such wow, many wows, wow!", room);
                    break;
                case "!raffle":
                    if (raffleStatus && !(raffleIsRegistered(getPName())))
                        addRafflePlayer(getPName());
                    break;
                case "!servertime":
                    var sTime = new Date(Game.getServerTime() * 1000);
                    sendMessage("It is " + sTime.toString(), room);
                    break;
                case "!showrandomitem":
                    var itemCount = Math.floor((Math.random() * nobleItems.length) + 0);
                    if (getPName() != Character.name)
                        sendMessage("Here's your random item: [item=" + nobleItems[itemCount] + "], " + getPName(), room);
                    else
                        sendMessage("Here's your random item: [item=" + nobleItems[itemCount] + "] ", room);

                    break;
                    /* case "!status":
                    if(Character.duelProtection)
                        sendMessage("I'm currently not available for duels. Please send me a private message to fix this.");
                    else
                        sendMessage("I'm available for duels!");
                    break;
               	case "!hp":
                    sendMessage("I currently have " + Character.health + " health points");
                    break;*/
                case "!clownfiesta":
                    sendMessage("( ͡° ͜◯ ͡°) ＣＬＯＷＮ ＦＩＥＳＴＡ ( ͡° ͜◯ ͡°) ", room);
                    break;
                case "!hownjub":
                    var percent = Math.random() < 0.5 ? ((1 - Math.random()) * (100 - 1) + 1).toFixed(2) : (Math.random() * (100 - 1) + 1).toFixed(2);
                    if (getPName() == "ajandek" || getPName() == "catalin1994" || getPName() == "The-Iceman")
                        percent = 100;
                    sendMessage(getPName() + " is " + percent + "% njub right now. add me", room);
                    break;
                case "!raffleentries":
                    var chance = 1 / westRaffle.length * 100;
                    chance = chance.toFixed(2);
                    if (raffleStatus)
                        sendMessage("There are currently " + westRaffle.length + " persons registered to the raffle. You have a " + chance + "% chance to win.", room);
                    break;
                    /*default:
                    sendMessage("Sorry " + getPName() + ", " + getMessage() + " is not a command I recognise.");*/
            }
        }

    }

    /* PRIVATE MESSAGING SYSTEM*/
    var senderName = "xNjub";
    var senderID = 0;

    /* Finds the client_id of an user */
    var pnameToId = function(name) {
        $.post("game.php?window=profile&mode=init", {
            name: encodeURIComponent(name)
        }, function(resp) {
            senderID = resp.playerid;
        });
        return senderID;
    }

    var sendPM = function(room, message) {
        Chat.Request.Send("/" + textColor + message, room);
        console.log("ID = " + senderID);
        console.log("Room = " + Chat.Resource.Manager.getRoom(senderID));
    }

    EventHandler.listen("chat_tell_received", function(room) {
        if (getMessage().charAt(0) == "!" && Game.getServerTime() > availableDate && !(isIgnored(getPName()))) {
            autoReply(room);
            availableDate = Game.getServerTime() + 2;
        }
    });

    /*This part of the code is stole from the game*/

    Chat.Layout.Tab.prototype = {
        getMainDiv: function() {
            return this.mainDiv;
        },
        getTabTitle: function() {
            var tabicon = "";
            if (this.room instanceof Chat.Resource.RoomClient) {
                tabicon = Chat.Formatter.formatStatus(this.room.client);
            } else {
                tabicon = "<div class='chat_icons white channelpic-" + this.room.room + "' />";
            }
            return "<div id='tab_title_" + this.id + "' class='chat_tab_title " + (this.isWhisper ? "client" : "") + "'>" + tabicon + "<span class='room_title'>" + this.room.getTitle() + "</span>" + "</div>";
        },
        addMessage: function(message) {
            this.scrollpane.getContentPane().append(message);

            /* HERE I DID CHANGES*/

            /*$('#xsht-all-messages').append(message);*/
            $('#xsht-latest-message').html(message);
            if (isCommand() && timePassed() && !(isIgnored(getPName())) && !(this.isWhisper)) {
                autoReply("saloon");
                availableDate = Game.getServerTime() + 2;
                changeDisplayColor('green');
            } else {
                changeDisplayColor('white');
            }

            if ((getPName() == Character.name && isCommand()) || (isGM() && isCommand())) {
                doAdminStuff();
                availableDate = Game.getServerTime() + 2;
            }

            if (getPName() == Character.name)
                changeDisplayColor('#00C0FF');

            /* END OF MY CHANGES */
            return this;
        },
        addClient: function(client) {
            var clist = this.contactList.getContentPane(),
                a = $("<div class='contact_" + client.id + "'>").append(Chat.Formatter.formatContactClient(client, this.room)),
                an = client.pname.toLowerCase();
            var chlds = clist.children(),
                b, bn;
            for (var i = 0; i < chlds.length; i++) {
                b = $(chlds[i]);
                bn = $(".client_name", b).text().toLowerCase().trim();
                if (an <= bn) {
                    a.insertBefore(b);
                    return this;
                }
            }
            clist.append(a);
            return this;
        },
        removeClient: function(clientId) {
            $(".contact_" + clientId, this.contactList.getContentPane()).remove();
            return this;
        },
        send: function() {
            var val = this.input.val();
            this.input.val("");
            this.room.send(val);
            return this;
        },
        read: function(state) {
            var el = $("#tab_title_" + this.id);
            if (!this._interval && !state) {
                var self = this;
                this._interval = setInterval(function() {
                    if (el) {
                        var ico = $(".chat_icons", el);
                        if (!ico.hasClass("new")) ico.addClass("new");
                        el.toggleClass("hover");
                    }
                }, 1000);
            } else if (this._interval && state) {
                clearInterval(this._interval);
                this._interval = undefined;
                this.room.read(true);
                if (el) {
                    $(".chat_icons", el).removeClass("new");
                    el.removeClass("hover");
                }
            }
            return this;
        },
        update: function() {
            this.scrollpane.scrollToEnd();
            this.updateTopic();
            return this;
        },
        clear: function() {
            this.scrollpane.getContentPane().empty();
            return this;
        },
        updateTopic: function() {
            var topic = this.room.getTopic(),
                el = $(".chat_topic", this.mainDiv);
            if (topic) {
                el.text(topic).prepend("<b>" + "Topic:" + "</b> ");
                el.show();
            } else {
                el.hide();
            }
            $(".chat_messages", this.mainDiv).css("top", topic ? (15 + el.height()) + "px" : "2px");
            return this;
        },
        updateTitle: function() {
            $("#tab_title_" + this.id).replaceWith(this.getTabTitle());
            return this;
        },
        onFocus: function() {
            this.input.focus();
            this.room.read(true);
            return this;
        },
        onBlur: function() {
            this.input.blur();
            return this;
        },
        init: function() {
            if (undefined != this.changeListener) return;
            var tab = this;
            this.changeListener = function(room, type, data) {
                if (tab.id != room.id) throw "Something is weird!";
                switch (type) {
                    case "ClientJoined":
                        tab.addClient(data[0]);
                        break;
                    case "ClientLeft":
                        tab.removeClient(data[0].id);
                        break;
                    case "NewMessage":
                        tab.addMessage(data[0]);
                        break;
                    case "ClearMessages":
                        tab.clear();
                        break;
                    case "ReadStateChanged":
                        tab.read(data[0]);
                        break;
                    case "TitleChanged":
                        tab.updateTitle();
                        break;
                    case "TopicChanged":
                        tab.updateTopic();
                        break;
                }
            };
            this.room.addListener(this.changeListener);
            return this;
        },
        deinit: function() {
            this.room.removeListener(this.changeListener);
            this.changeListener = undefined;
            return this;
        }
    };;
});